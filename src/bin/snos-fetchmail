#!/usr/bin/env perl

use strict;
use warnings;
use v5.10;
use autodie ':all';

use Data::Dumper;
use Email::Address;
use File::Temp 'tempfile';
use HTML::TreeBuilder;
use HTTP::Cookies;
use LWP::UserAgent;
use Net::SMTP;
use URI::URL;

use constant SMTP_SERVER => 'localhost';

main();

sub main {
    die "usage: <SNOS hostname> <callsign> [<password>]" unless @ARGV >= 2;
    my ($url_string, $callsign, $password) = @ARGV;
    my $base_url = URI->new($url_string);
    our $UA = make_agent();

    log_line($base_url, "Logging in as $callsign");
    login($base_url, $callsign, $password);

    log_line($base_url, "Getting message list");
    my @messages = list($base_url);
    @messages = grep { $_->{to} eq uc($callsign) } @messages;
    @messages = sort { $a->{id} <=> $b->{id} } @messages;
    my @message_ids = map { $_->{id} } @messages;
    log_line($base_url, "Found ", scalar(@messages), " messages: ", join(' ', @message_ids));

    return 0 unless @messages;

    foreach my $message (@messages) {
        my $fh = tempfile();
        my $id = $message->{id};
        log_line($base_url, "Downloading message $id");

        my $content = get_message($base_url, $id);
        my $from = get_from($content);

        log_line($base_url, "Got message");
        say STDERR $content;

        log_line($base_url, "Connecting to SMTP server ", SMTP_SERVER);
        my $smtp = Net::SMTP->new(SMTP_SERVER);
        $smtp->mail($from);
        $smtp->to($callsign);

        log_line($base_url, "Killing message $id");
        # FIXME start the SMTP delivery first then kill the message
        # so there is a really good chance talking to the SMTP
        # server wont fail and the message is deleted before it
        # moves along. But don't deliver first or a failure during
        # delete will generate duplicates.
        # This isn't good enough long term.
        kill_message($base_url, $id);

        log_line($base_url, "Sending message to SMTP server");
        $smtp->data($content);

        log_line($base_url, "Done with message $id");
    }
}

sub log_line {
    my ($url, @line) = @_;

    say STDERR "$url ", join('', @line);
}

sub get_from {
    my ($content) = @_;

    unless ($content =~ m/^From: (.+)/m) {
        die "could not find From: header";
    }

    my $from_line = $1;
    my @parsed = Email::Address->parse($from_line);
    die "expected to find 1 email address" unless @parsed == 1;

    return $parsed[0]->address;
}

sub make_agent {
    my $cookies = HTTP::Cookies->new;
    my $ua = LWP::UserAgent->new(keep_alive => 1, cookie_jar => $cookies);
    return $ua;
}

sub login {
    my ($base, $callsign, $password) = @_;
    my $url = $base->clone;
    our $UA;

    $password = "" unless defined $password;

    $url->path('/nodehome.htm');

    my $resp = $UA->post($url, { User => $callsign, Password => $password });

    die "could not fetch $url: " . $resp->status_line unless $resp->is_success;
}

sub list {
    my ($base) = @_;
    my $url = $base->clone;
    our $UA;

    $url->path('/cmd/ndmsgli.ssi');

    my $resp = $UA->post($url, { Kind => 'P', Max => 50 });

    die "could not fetch $url: " . $resp->status_line unless $resp->is_success;
    my $html = $resp->decoded_content;
    my @messages = extract_message_info($html);

    return @messages;
}

sub extract_message_info {
    my ($html) = @_;
    my $tree = HTML::TreeBuilder->new_from_content($html);
    my @messages;

    foreach my $row ($tree->look_down(_tag => 'tr', class => 'msgrow')) {
        my @tds = $row->look_down(_tag => 'td');
        my $id = $row->look_down(type => 'submit')->attr('name');
        my $type = $tds[2]->as_trimmed_text;
        my $to = $tds[3]->as_trimmed_text;
        my $from = $tds[4]->as_trimmed_text;

        next unless $type eq 'P';
        push(@messages, { id => $id, type => $type, to => $to, from => $from });
    }

    return @messages;
}

sub get_message {
    my ($base_url, $id) = @_;
    my $url = $base_url->clone;
    our $UA;

    $url->path('/cmd/msgrd.ssi');
    $url->query("$id=read");

    my $resp = $UA->get($url);
    die "could not download message $id from $url: " . $resp->status_line unless $resp->is_success;

    my $html = $resp->decoded_content;
    my $tree = HTML::TreeBuilder->new_from_content($html);

    my @header = $tree->look_down(_tag => 'pre', class => 'msghdr');
    die "invalid number of msghdr" unless @header == 1;
    my $header_text = fix_whitespace($header[0]->as_text);

    my @body = $tree->look_down(_tag => 'pre', class => 'msgbody');
    die "invalid number of msgbody" unless @body == 1;
    my $body_text = fix_whitespace($body[0]->as_text);

    my $buf = join('', $header_text, "\n", $body_text, "\n");
    return $buf;
}

sub fix_whitespace {
    my ($content) = @_;
    $content =~ s/^.*\n// or die "unexpected whitespace";
    return $content;
}

sub kill_message {
    my ($base_url, $id) = @_;
    my $url = $base_url->clone;
    our $UA;

    $url->path('/cmd/msgrd.ssi');
    $url->query("$id=kill");

    # ugh modifying state with a get :-(
    my $resp = $UA->get($url);
    die "could not kill message $id from $url: " . $resp->status_line unless $resp->is_success;

    my $tree = HTML::TreeBuilder->new_from_content($resp->decoded_content);
    my @bodies = $tree->look_down(_tag => 'body');
    die "expected exactly 1 <body>" unless @bodies == 1;

    my $body = $bodies[0]->as_trimmed_text;

    die "unexpected result: $body" unless $body eq 'Message killed';

    return;
}
