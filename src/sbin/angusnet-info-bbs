#!/usr/bin/env perl

# this is intended to be run through in.telnetd as a replacement
# for login with telnetd running as nobody, example inetd.conf:
# telnet stream tcp nowait nobody /usr/sbin/tcpd /usr/sbin/in.telnetd -L /usr/local/sbin/angusnet-info-bbs

# debian packages:
#   libfile-slurp-perl

use strict;
use warnings;
use v5.10;
use autodie;

use Data::Dumper;
use File::Basename;
use Getopt::Long;

main();

sub main {
    # ignored for now - just here for compat with in.telnetd
    my %args = parse_args();
    my $bbs = BBS->new;

    $bbs->run_session;
    exit(0);
}

sub parse_args {
    my %args;

    GetOptions(
        "p" => \$args{preserve},
        "h=s" => \$args{host},
    ) or usage();

    usage() if @ARGV;

    return %args;
}

sub usage {
    my $basename = basename($0);

    say STDERR "Usage:";
    say STDERR "  $basename [-p] [-h <hostname>] <username>";
    say STDERR "  like /usr/bin/login but all switches are ignored";
    say STDERR "  specifying a username generates a fatal error";

    exit(1);
}

package BBS;

use strict;
use warnings;
use v5.10;
use autodie;

use Data::Dumper;
use File::Slurp;
use IO::Socket::Telnet;
use Net::Server::Fork;

use base qw(Net::Server::Fork);

use constant INFO_PATH => '/etc/local/angusnet/nodeinfo.txt';
use constant PROMPT => '? for help> ';
use constant COMMAND_HANDLERS => {
    '?' => \&command_help,
    help => \&command_help,
    bye => \&command_bye,
    info => \&command_info,
    show => \&command_show,
    cow => \&command_cow,
    game => \&command_game,
};
use constant SHOW_PROGRAMS => {
    'rip-neighbors' => 'angusnet-show-ip-rip-status',
    'rip-table' => 'angusnet-show-ip-rip',
    'ip-neighbors' => 'angusnet-show-ampr-neighbors',
    'ip-route' => 'angusnet-show-ampr-route',
    'netrom-neighbors' => 'angusnet-show-netrom-neighbors',
    'netrom-nodes' => 'angusnet-show-netrom-nodes',
};
use constant COW_PROGRAMS => {
    say => '/usr/games/cowsay',
    think => '/usr/games/cowthink',
};
use constant GAME_PROGRAMS => {
    gofish => '/usr/games/go-fish',
};

sub run_session {
    my ($self) = @_;
    our $SESSION_RUNNING = 1;

    while($SESSION_RUNNING) {
        my (@input) = prompt();

        # user pushed enter and had nothing but white space
        next unless @input;
        my ($command, @args) = @input;
        # read error
        last unless defined $command;

        my $handler = COMMAND_HANDLERS->{$command};
        if (defined $handler) {
            $handler->(@args);
        } else {
            bad_command($command);
        }
    }
}

sub prompt {
    our $SESSION_RUNNING = 1;

    print PROMPT;

    my $input = <STDIN>;
    return undef unless defined $input;

    $input =~ s/^\s+//;
    $input =~ s/\s+$//;

    return split(/\s+/, $input);
}

sub bad_command {
    my ($command) = @_;
    say "Error: invalid command '$command'";
    say '';
}

sub command_help {
    say "Commands:";
    say "? or help: Get this help info";
    say "bye: logout";
    say "info: get a text description of this system";
    say "show: get information on the status of this system";
    say "cow: make a cow do things";
    say '';
}

sub command_bye {
    our $SESSION_RUNNING = 0;
    say "Logging out";
}

sub command_info {
    if (-e INFO_PATH) {
        say read_file(INFO_PATH);
    } else {
        say "no info available";
    }
}

sub show_program {
    my (@command) = @_;
    system(@command);
    say '';
    return;
}

sub command_show {
    my ($to_show) = @_;

    unless (defined $to_show) {
        command_show__usage();
        return;
    }

    my $program = SHOW_PROGRAMS->{$to_show};
    unless (defined $program) {
        command_show__usage();
        return;
    }

    show_program($program);
}

sub command_show__usage {
    say "Usage:";

    for my $name (sort keys SHOW_PROGRAMS->%*) {
        say "  show $name";
    }
}

sub command_cow {
    my (@args) = @_;

    if (@args < 2) {
        command_cow__usage();
        return;
    };

    my $verb = shift @args;
    my $text = join(' ', @args);
    my $program = COW_PROGRAMS->{$verb};

    if (defined $program) {
        system($program, $text);
    } else {
        command_cow__usage();
    }

}

sub command_cow__usage {
    say "Usage: ";
    say "  cow say <something to say>";
    say "  cow think <something to think>";

    return;
}
