#!/usr/bin/env perl

# this is intended to be run through in.telnetd as a replacement
# for login with telnetd running as nobody, example inetd.conf:
#   telnet stream tcp nowait nobody /usr/sbin/tcpd /usr/sbin/in.telnetd -L /usr/local/sbin/angusnet-info-bbs
# or from inetd directly in a raw mode
#   snos-bbs stream tcp nowait nobody /usr/sbin/tcpd /usr/local/sbin/angusnet-info-bbs
#
# debian packages:
#   cowsay bsdgames animals libfile-slurp-perl telnetd libyaml-perl
#   libterm-readline-perl-perl telnetd

use strict;
use warnings;
use v5.10;
use autodie;

use Data::Dumper;
use File::Basename;
use Getopt::Long;
use Sys::Hostname;

main();

sub main {
    my %args = parse_args();
    my $bbs = BBS->new;

    $bbs->run_session(%args);
    exit(0);
}

sub parse_args {
    my %args;

    GetOptions(
        "dev" => \$args{dev},
        "p" => \$args{preserve},
        "h=s" => \$args{host},
    ) or usage();

    usage() if @ARGV > 1;

    $args{dev} = 0 unless defined $args{dev};
    $args{preserve} = 0 unless defined $args{preserve};

    return %args;
}

sub usage {
    my $basename = basename($0);

    say STDERR "Usage:";
    say STDERR "  $basename [--dev] [-p] [-h <hostname>] <username>";
    say STDERR "";
    say STDERR "  --dev runs a standalone copy outside in.telnetd for dev work";
    say STDERR "  -p preserve enviornment";
    say STDERR "  -h <hostname> is ignored for compatibility with login";

    exit(1);
}

package BBS;

use strict;
use warnings;
use v5.10;
use autodie;

use Data::Dumper;
use File::Slurp;
use Sys::Hostname;
use Term::ReadLine;
use YAML qw(LoadFile);

use constant VERSION => '0.0.1';
use constant INFO_PATH => '/etc/local/angusnet/nodeinfo.txt';
use constant CONFIG_PATH => '/etc/local/angusnet/angusnet-info-bbs.yaml';
use constant PROMPT_CALLSIGN => 'Callsign: ';

use constant COMMAND_HANDLERS => {
    '?' => \&command_help,
    help => \&command_help,
    bye => \&command_bye,
    exit => \&command_bye,
    quit => \&command_bye,
    logout => \&command_bye,
    info => \&command_info,
    cow => \&command_cow,
};

use constant COW_PROGRAMS => {
    say => 'cowsay',
    think => 'cowthink',
};

sub new {
    my ($package) = @_;
    return bless({}, $package);
}

sub run_session {
    my ($self, %args) = @_;
    our $CONFIG = load_config(CONFIG_PATH);
    my $handlers = make_handlers();
    our $SESSION_RUNNING = 1;
    our $CALLSIGN;

    $| = 1; print '';

    unless ($args{preserve}) {
        %ENV = ();
    }

    # SNOS telnet is more like netcat than a telnet protocol
    # speaker but if the BBS runs out of inetd then the terminal
    # isn't setup and readline can't work.
    if (exists $ENV{TERM}) {
        our $READLINE = Term::ReadLine->new('AngusBBS');
    }

    foreach my $env (keys $CONFIG->{environment}->%*) {
        $ENV{$env} = $CONFIG->{environment}->{$env};
    }

    unless ($args{dev}) {
        # disable SIGINT so ctrl+c does not kill the
        # BBS
        $SIG{INT} = 'IGNORE';
    }

    if (@ARGV == 1) {
        my $got_call = uc($ARGV[0]);
        die "invalid callsign" unless is_valid_callsign($got_call);
        $CALLSIGN = $got_call;
    } else {
        while(1) {
            my $got_call = prompt_callsign();
            last unless defined $got_call;

            unless(is_valid_callsign($got_call)) {
                say "Invalid callsign '$got_call'";
                next;
            }

            $CALLSIGN = $got_call;
            last;
        }
    }

    unless (defined $CALLSIGN) {
        say "Can not start session with out a call sign";
        return;
    }

    say "AngusBBS v", VERSION;
    say "Enable linemode in your telnet client for best experience.";
    say "If you get ^M when you press enter try enabling line mode one more time.";
    say "Help is available via ? or help";
    say "";

    while($SESSION_RUNNING) {
        my (@input) = prompt();

        # user pushed enter and had nothing but white space
        next unless @input;
        my ($command, @args) = @input;
        # read error
        last unless defined $command;

        my $handler = $handlers->{$command};
        if (defined $handler) {
            $handler->(@args);
        } else {
            bad_command($command);
        }
    }

    say "Ending session";
}

sub is_valid_callsign {
    my ($callsign) = @_;

    return 0 unless defined $callsign;
    # from wikipedia
    return 0 unless $callsign =~ m/^[A-Z0-9]{1,}[0-9][A-Z0-9]{1,4}$/;
    return 1;
}

sub load_config {
    my ($path) = @_;
    return LoadFile($path);
}

sub make_handlers {
    my ($config) = @_;
    our $CONFIG;
    my $menu = $CONFIG->{menu};
    my %handlers = COMMAND_HANDLERS->%*;

    foreach my $menu_name (keys %$menu) {
        die "duplicate menu name: $menu_name" if exists $handlers{$menu_name};
        $handlers{$menu_name} = sub { dynamic_command($menu->{$menu_name}, @_) };
    }

    return \%handlers;
}

sub prompt {
    our $CALLSIGN;
    my $hostname = hostname();
    my $prompt = "$CALLSIGN\@$hostname> ";
    our $READLINE;
    my $input;

    if (defined $READLINE) {
       $input = $READLINE->readline($prompt);
    } else {
        print $prompt;
        $input = <STDIN>;
    }

    return undef unless defined $input;
    return split(/\s+/, strip_whitespace_head_tail($input));
}

sub prompt_callsign {
    print PROMPT_CALLSIGN;

    my $input = <STDIN>;
    return undef unless defined $input;
    return uc(strip_whitespace_head_tail($input));
}

sub strip_whitespace_head_tail {
    my ($string) = @_;
    $string =~ s/^\s+//;
    $string =~ s/\s+$//;
    return $string;
}

sub bad_command {
    my ($command) = @_;
    say "Error: invalid command '$command'";
    say '';
}

sub command_help {
    our $CONFIG;

    say "Commands:";
    say "  ? or help: Get this help info";
    say "  bye: logout";
    say "  info: get a text description of this system";
    say "  cow: tell a cow to do things";

    foreach my $menu_name (sort keys $CONFIG->{menu}->%*) {
        say "  $menu_name: ", $CONFIG->{menu}->{$menu_name}->{messages}->{help};
    }

    say '';
}

sub command_bye {
    our $SESSION_RUNNING = 0;
}

sub command_info {
    if (-e INFO_PATH) {
        say read_file(INFO_PATH);
    } else {
        say "no info available";
    }
}

sub show_program {
    my (@command) = @_;
    system(@command);
    say '';
    return;
}

sub command_cow {
    my (@args) = @_;

    if (@args < 2) {
        command_cow__usage();
        return;
    };

    my $verb = shift @args;
    my $text = join(' ', @args);
    my $program = COW_PROGRAMS->{$verb};

    if (defined $program) {
        show_program($program, $text);
    } else {
        command_cow__usage();
    }

}

sub command_cow__usage {
    say "Usage: ";
    say "  cow say <something to say>";
    say "  cow think <something to think>";

    return;
}

sub dynamic_command {
    my ($menu, @args) = @_;

    if (@args != 1) {
        dynamic_command__usage($menu);
        return;
    }

    my $menu_item = $args[0];
    my $program = $menu->{programs}->{$menu_item};

    if (defined $program) {
        show_program($program);
    } else {
        say "Error: invalid argument '$menu_item'";
        dynamic_command__usage($menu);
    }
}

sub dynamic_command__usage {
    my ($menu) = @_;

    say "Usage: ", $menu->{messages}->{usage};
    say $menu->{messages}->{list};

    foreach my $name (sort keys $menu->{programs}->%*) {
        say "  ", $name;
    }
}
